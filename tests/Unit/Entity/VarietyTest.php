<?php

namespace Librinfo\VarietiesBundle\Entity\Test\Unit;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-05-23 at 11:19:44.
 */
use PHPUnit\Framework\TestCase;
use Librinfo\VarietiesBundle\Entity\Variety;
use Doctrine\Common\Collections\ArrayCollection;
use Librinfo\VarietiesBundle\Entity\VarietyDescriptionPlant;
use AppBundle\Entity\OuterExtension\LibrinfoVarietiesBundle\VarietyExtension;

class VarietyTest extends TestCase {

    /**
     * @var Variety
     */
    protected $object;
    protected $mockVarietyDescriptionProfessional;
    protected $mockVariety;
    protected $mockPlantCategory;
    protected $mockSpecies;
    protected $mockTraitNameable;
    protected $mockVarietyDescriptionPlant;
    protected $mockTraitOuterExtensible;
    protected $mockGenericDescription;
    protected $mockVarietyDescriptionAmateur;
    protected $mockProductionDescription;
    protected $mockCommercialDescription;
    protected $mockInnerDescription;
    protected $mockVarietyDescriptionCulture;
    protected $varietydescriptionplant;
    protected $getvalue;
    use VarietyExtension;

    //todo: verify this is ok to use extension trait in unit testing
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Variety;
        $this->mockTraitNameable = $this->getMockForTrait('\Blast\BaseEntitiesBundle\Entity\Traits\Nameable');
        $this->mockTraitOuterExtensible = $this->getMockForTrait('\Blast\OuterExtensionBundle\Entity\Traits\OuterExtensible');
        $this->mockVarietyDescriptionCulture = $this->createMock('\Librinfo\VarietiesBundle\Entity\VarietyDescriptionCulture');
        $this->mockSpecies = $this->createMock('\Librinfo\VarietiesBundle\Entity\Species');
        $this->mockVariety = $this->createMock('\Librinfo\VarietiesBundle\Entity\Variety');
        $this->mockVarietyDescriptionAmateur = $this->createMock('\Librinfo\VarietiesBundle\Entity\VarietyDescriptionAmateur');
        $this->mockVarietyDescriptionProfessional = $this->createMock('\Librinfo\VarietiesBundle\Entity\VarietyDescriptionProfessional');
        $this->mockPlantCategory = $this->createMock('\Librinfo\VarietiesBundle\Entity\PlantCategory');
        $this->mockVarietyDescriptionPlant = $this->createMock('\Librinfo\VarietiesBundle\Entity\VarietyDescriptionPlant');
        $this->mockProductionDescription = $this->createMock('\Librinfo\VarietiesBundle\Entity\VarietyDescriptionProduction');
        $this->mockCommercialDescription = $this->createMock('\Librinfo\VarietiesBundle\Entity\VarietyDescriptionCommercial');
        $this->mockInnerDescription = $this->createMock('\Librinfo\VarietiesBundle\Entity\VarietyDescriptionInner');
        
        $this->varietydescriptionplant = new VarietyDescriptionPlant;
        $this->varietydescriptionplant->setField('foliage_type');
        $this->varietydescriptionplant->setValue('testvalue');
        $this->getvalue = $this->varietydescriptionplant->getValue();
        $this->object->AddPlantDescription($this->varietydescriptionplant);
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::initCollections
     * @todo   Implement testInitCollections().
     */
    public function testInitCollections() {

        $this->object->InitCollections();
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getChildren());

        $this->assertInstanceOf(ArrayCollection::class, $this->object->getPlantCategories());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getProfessionalDescriptions());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getAmateurDescriptions());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getProductionDescriptions());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getCommercialDescriptions());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getPlantDescriptions());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getCultureDescriptions());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getImages());
        $this->assertInstanceOf(ArrayCollection::class, $this->object->getInnerDescriptions());
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::__clone
     * @todo   Implement test__clone().
     */
    public function test__clone() {
        $this->object->__clone();
        $id = $this->object->getId();
        $code = $this->object->getCode();
        $this->assertNull($id);
        $this->assertNull($code);
        $test = $this->object->getChildren();
        $this->assertInstanceOf(ArrayCollection::class, $test);
//todo test method __clone use this method initOuterExtendedClasses();
//        $this->mockTraitOuterExtensible->initOuterExtendedClasses();
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::__call
     * @todo   Implement test__call().
     */
    public function test__call() {

        $unusedArg = null;
        $name = "plant||foliage_type";
        $testcall = $this->object->__call($name,$unusedArg);
        $this->assertEquals($testcall, $this->getvalue);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getName
     * @todo   Implement testGetName().
     */
    public function testGetName() {

        //testing return $this->getNameTrait();
        $get = $this->object->getName();
        $this->assertEquals($get, '');

        //testing return $this->getParent()->getName();
        $this->mockTraitNameable->setName(null);
        $get2 = $this->object->getName();
        $getname = $this->mockTraitNameable->getName();
        $this->assertEquals($get2, $getname);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::hasParent
     * @todo   Implement testHasParent().
     */
    public function testHasParent() {
        $has = $this->object->hasParent();
        $this->assertNotNull($has);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getSeveralStrains
     * @todo   Implement testGetSeveralStrains().
     */
    public function testGetSeveralStrains() {
        $get = $this->object->getSeveralStrains();
        $this->assertGreaterThan($get, 1);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setLatinName
     * @todo   Implement testSetLatinName().
     */
    public function testSetLatinName() {
        $test = 'test';
        $this->object->setLatinName($test);
        $get = $this->object->getLatinName();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getLatinName
     * @todo   Implement testGetLatinName().
     */
    public function testGetLatinName() {
        $get = $this->object->getLatinName();
        $this->assertEquals($get, '');
        //testing return $this->getParent()->getLatinName();
        $this->object->setLatinName(false);
        $get2 = $this->object->getLatinName();
        $getlatin = $this->mockVariety->getLatinName();
        $this->assertEquals($get2, $getlatin);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setIsStrain
     * @todo   Implement testSetIsStrain().
     */
    public function testSetIsStrain() {
        $test = 'test';
        $this->object->setIsStrain($test);
        $get = $this->object->getIsStrain();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getIsStrain
     * @todo   Implement testGetIsStrain().
     */
    public function testGetIsStrain() {
        $get = $this->object->getIsStrain();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setAlias
     * @todo   Implement testSetAlias().
     */
    public function testSetAlias() {
        $test = 'test';
        $this->object->setAlias($test);
        $get = $this->object->getAlias();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getAlias
     * @todo   Implement testGetAlias().
     */
    public function testGetAlias() {
        $get = $this->object->getAlias();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setCode
     * @todo   Implement testSetCode().
     */
    public function testSetCode() {
        $test = 'test';
        $this->object->setCode($test);
        $get = $this->object->getCode();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getCode
     * @todo   Implement testGetCode().
     */
    public function testGetCode() {
        $get = $this->object->getCode();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setLifeCycle
     * @todo   Implement testSetLifeCycle().
     */
    public function testSetLifeCycle() {
        $test = 'test';
        $this->object->setLifeCycle($test);
        $get = $this->object->getLifeCycle();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getLifeCycle
     * @todo   Implement testGetLifeCycle().
     */
    public function testGetLifeCycle() {
        $get = $this->object->getLifeCycle();
        $this->assertEquals($get, '');
        //testing return $this->getParent()->getLifeCycle();
        $this->object->setLifeCycle(false);
        $get2 = $this->object->getLifeCycle();
        $getlife = $this->mockVariety->getLifeCycle();
        $this->assertEquals($get2, $getlife);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setOfficial
     * @todo   Implement testSetOfficial().
     */
    public function testSetOfficial() {
        $test = 'test';
        $this->object->setOfficial($test);
        $get = $this->object->getOfficial();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getOfficial
     * @todo   Implement testGetOfficial().
     */
    public function testGetOfficial() {
        $get = $this->object->getOfficial();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setOfficialName
     * @todo   Implement testSetOfficialName().
     */
    public function testSetOfficialName() {
        $test = 'test';
        $this->object->setOfficialName($test);
        $get = $this->object->getOfficialName();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getOfficialName
     * @todo   Implement testGetOfficialName().
     */
    public function testGetOfficialName() {
        $get = $this->object->getOfficialName();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setOfficialDateIn
     * @todo   Implement testSetOfficialDateIn().
     */
    public function testSetOfficialDateIn() {
        $date = '2017-24-05';
        $this->object->setOfficialDateIn($date);
        $get = $this->object->getOfficialDateIn();
        $this->assertEquals($get, '2017-24-05');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getOfficialDateIn
     * @todo   Implement testGetOfficialDateIn().
     */
    public function testGetOfficialDateIn() {
        $get = $this->object->getOfficialDateIn();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setOfficialDateOut
     * @todo   Implement testSetOfficialDateOut().
     */
    public function testSetOfficialDateOut() {
        $date = 'test';
        $this->object->setOfficialDateOut($date);
        $get = $this->object->getOfficialDateOut();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getOfficialDateOut
     * @todo   Implement testGetOfficialDateOut().
     */
    public function testGetOfficialDateOut() {
        $get = $this->object->getOfficialDateOut();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setOfficialMaintainer
     * @todo   Implement testSetOfficialMaintainer().
     */
    public function testSetOfficialMaintainer() {
        $test = 'test';
        $this->object->setOfficialMaintainer($test);
        $get = $this->object->getOfficialMaintainer();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getOfficialMaintainer
     * @todo   Implement testGetOfficialMaintainer().
     */
    public function testGetOfficialMaintainer() {
        $get = $this->object->getOfficialMaintainer();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setLegalGerminationRate
     * @todo   Implement testSetLegalGerminationRate().
     */
    public function testSetLegalGerminationRate() {
        $test = 'test';
        $this->object->setLegalGerminationRate($test);
        $get = $this->object->getLegalGerminationRate();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getLegalGerminationRate
     * @todo   Implement testGetLegalGerminationRate().
     */
    public function testGetLegalGerminationRate() {
        $get = $this->object->getLegalGerminationRate();
        //todo add test to this return
        //       if (!$this->legal_germination_rate && $this->getSpecies())
        //    return $this->getSpecies()->getLegalGerminationRate();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setRegulatoryStatus
     * @todo   Implement testSetRegulatoryStatus().
     */
    public function testSetRegulatoryStatus() {
        $test = 'test';
        $this->object->setRegulatoryStatus($test);
        $get = $this->object->getRegulatoryStatus();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getRegulatoryStatus
     * @todo   Implement testGetRegulatoryStatus().
     */
    public function testGetRegulatoryStatus() {
        $get = $this->object->getRegulatoryStatus();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setGerminationRate
     * @todo   Implement testSetGerminationRate().
     */
    public function testSetGerminationRate() {
        $test = 'test';
        $this->object->setGerminationRate($test);
        $get = $this->object->getGerminationRate();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getGerminationRate
     * @todo   Implement testGetGerminationRate().
     */
    public function testGetGerminationRate() {
        $get = $this->object->getGerminationRate();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setParent
     * @todo   Implement testSetParent().
     */
    public function testSetParent() {
        $this->object->setParent($this->mockVariety = null);
        $get = $this->object->getParent();
        $this->assertNull($get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getParent
     * @todo   Implement testGetParent().
     */
    public function testGetParent() {
        $get = $this->object->getParent();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addChild
     * @todo   Implement testAddChild().
     */
    public function testAddChild() {
        $this->object->addChild($this->mockVariety);
        $array = $this->object->getChildren();
        $this->assertContains($this->mockVariety, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeChild
     * @todo   Implement testRemoveChild().
     */
    public function testRemoveChild() {
        $this->object->addChild($this->mockVariety);
        $array = $this->object->getChildren();
        $this->object->removeChild($this->mockVariety);
        $this->assertNotcontains($this->mockVariety, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getChildren
     * @todo   Implement testGetChildren().
     */
    public function testGetChildren() {
        $get = $this->object->getChildren();
        $this->assertInstanceOf(ArrayCollection::class, $get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setSpecies
     * @todo   Implement testSetSpecies().
     */
    public function testSetSpecies() {
        $this->object->setSpecies($this->mockSpecies = null);
        $get = $this->object->getSpecies();
        $this->assertNull($get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getSpecies
     * @todo   Implement testGetSpecies().
     */
    public function testGetSpecies() {
        $get = $this->object->getSpecies();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addPlantCategory
     * @todo   Implement testAddPlantCategory().
     */
    public function testAddPlantCategory() {
        $this->object->addPlantCategory($this->mockPlantCategory);
        $test = $this->object->getPlantCategories();
        $this->assertContains($this->mockPlantCategory, $test);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removePlantCategory
     * @todo   Implement testRemovePlantCategory().
     */
    public function testRemovePlantCategory() {

        $this->object->addPlantCategory($this->mockPlantCategory);
        $array = $this->object->getPlantCategories();
        $this->object->removePlantCategory($this->mockPlantCategory);
        $this->assertNotcontains($this->mockPlantCategory, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getPlantCategories
     * @todo   Implement testGetPlantCategories().
     */
    public function testGetPlantCategories() {
        $get = $this->object->getPlantCategories();
        $this->assertInstanceOf(ArrayCollection::class, $get);
        $this->assertNotNull($get);
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setPlantCategories
     * @todo   Implement testSetPlantCategories().
     */
    public function testSetPlantCategories() {
        $plant_categories = $this->object->getPlantCategories();
        $this->object->setPlantCategories($plant_categories);
        $this->assertEquals($plant_categories, $this->object->getPlantCategories());
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setSelectionAdvice
     * @todo   Implement testSetSelectionAdvice().
     */
    public function testSetSelectionAdvice() {
        $test = 'test';
        $this->object->setSelectionAdvice($test);
        $get = $this->object->getSelectionAdvice();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getSelectionAdvice
     * @todo   Implement testGetSelectionAdvice().
     */
    public function testGetSelectionAdvice() {
        $get = $this->object->getSelectionAdvice();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setSelectionCriteria
     * @todo   Implement testSetSelectionCriteria().
     */
    public function testSetSelectionCriteria() {
        $test = 'test';
        $this->object->setSelectionCriteria($test);
        $get = $this->object->getSelectionCriteria();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getSelectionCriteria
     * @todo   Implement testGetSelectionCriteria().
     */
    public function testGetSelectionCriteria() {
        $get = $this->object->getSelectionCriteria();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setMiscAdvice
     * @todo   Implement testSetMiscAdvice().
     */
    public function testSetMiscAdvice() {
        $test = 'test';
        $this->object->setMiscAdvice($test);
        $get = $this->object->getMiscAdvice();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getMiscAdvice
     * @todo   Implement testGetMiscAdvice().
     */
    public function testGetMiscAdvice() {
        $get = $this->object->getMiscAdvice();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setTkw
     * @todo   Implement testSetTkw().
     */
    public function testSetTkw() {
        $test = 'test';
        $this->object->setTkw($test);
        $get = $this->object->getTkw();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getTkw
     * @todo   Implement testGetTkw().
     */
    public function testGetTkw() {
//        $this->object->getTkw();
//        $this->assertEquals;
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setSeedLifespan
     * @todo   Implement testSetSeedLifespan().
     */
    public function testSetSeedLifespan() {
        $test = 'test';
        $this->object->setSeedLifespan($test);
        $get = $this->object->getSeedLifespan();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getSeedLifespan
     * @todo   Implement testGetSeedLifespan().
     */
    public function testGetSeedLifespan() {
        $get = $this->object->getSeedLifespan();
        $this->assertEquals($get, '');
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setRaiseDuration
     * @todo   Implement testSetRaiseDuration().
     */
    public function testSetRaiseDuration() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getRaiseDuration
     * @todo   Implement testGetRaiseDuration().
     */
    public function testGetRaiseDuration() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setSeedheadYield
     * @todo   Implement testSetSeedheadYield().
     */
    public function testSetSeedheadYield() {
        $test = 'test';
        $this->object->setSeedheadYield($test);
        $get = $this->object->getSeedheadYield();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getSeedheadYield
     * @todo   Implement testGetSeedheadYield().
     */
    public function testGetSeedheadYield() {
        $get = $this->object->getSeedheadYield();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setDistanceOnLine
     * @todo   Implement testSetDistanceOnLine().
     */
    public function testSetDistanceOnLine() {
        $test = 'test';
        $this->object->setDistanceOnLine($test);
        $get = $this->object->getDistanceOnLine();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getDistanceOnLine
     * @todo   Implement testGetDistanceOnLine().
     */
    public function testGetDistanceOnLine() {
        $get = $this->object->getDistanceOnLine();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setDistanceBetweenLines
     * @todo   Implement testSetDistanceBetweenLines().
     */
    public function testSetDistanceBetweenLines() {
        $test = 'test';
        $this->object->setDistanceBetweenLines($test);
        $get = $this->object->getDistanceBetweenLines();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getDistanceBetweenLines
     * @todo   Implement testGetDistanceBetweenLines().
     */
    public function testGetDistanceBetweenLines() {
        $get = $this->object->getDistanceBetweenLines();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setPlantDensity
     * @todo   Implement testSetPlantDensity().
     */
    public function testSetPlantDensity() {
        $test = 'test';
        $this->object->setPlantDensity($test);
        $get = $this->object->getPlantDensity();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getPlantDensity
     * @todo   Implement testGetPlantDensity().
     */
    public function testGetPlantDensity() {
        $get = $this->object->getPlantDensity();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setAreaPerKg
     * @todo   Implement testSetAreaPerKg().
     */
    public function testSetAreaPerKg() {
        $test = 'test';
        $this->object->setAreaPerKg($test);
        $get = $this->object->getAreaPerKg();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getAreaPerKg
     * @todo   Implement testGetAreaPerKg().
     */
    public function testGetAreaPerKg() {
        $get = $this->object->getAreaPerKg();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setSeedheadsPerKg
     * @todo   Implement testSetSeedheadsPerKg().
     */
    public function testSetSeedheadsPerKg() {
        $test = 'test';
        $this->object->setSeedheadsPerKg($test);
        $get = $this->object->getSeedheadsPerKg();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getSeedheadsPerKg
     * @todo   Implement testGetSeedheadsPerKg().
     */
    public function testGetSeedheadsPerKg() {
        $get = $this->object->getSeedheadsPerKg();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setBaseSeedPerKg
     * @todo   Implement testSetBaseSeedPerKg().
     */
    public function testSetBaseSeedPerKg() {
        $test = 'test';
        $this->object->setBaseSeedPerKg($test);
        $get = $this->object->getBaseSeedPerKg();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getBaseSeedPerKg
     * @todo   Implement testGetBaseSeedPerKg().
     */
    public function testGetBaseSeedPerKg() {
        $get = $this->object->getBaseSeedPerKg();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setTransmittedDiseases
     * @todo   Implement testSetTransmittedDiseases().
     */
    public function testSetTransmittedDiseases() {
        $test = 'test';
        $this->object->setTransmittedDiseases($test);
        $get = $this->object->getTransmittedDiseases();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getTransmittedDiseases
     * @todo   Implement testGetTransmittedDiseases().
     */
    public function testGetTransmittedDiseases() {
        $get = $this->object->getTransmittedDiseases();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setStrainCharacteristics
     * @todo   Implement testSetStrainCharacteristics().
     */
    public function testSetStrainCharacteristics() {
        $test = 'test';
        $this->object->setStrainCharacteristics($test);
        $get = $this->object->getStrainCharacteristics();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getStrainCharacteristics
     * @todo   Implement testGetStrainCharacteristics().
     */
    public function testGetStrainCharacteristics() {
        $get = $this->object->getStrainCharacteristics();
        $this->assertEquals($get, '');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addProfessionalDescription
     * @todo   Implement testAddProfessionalDescription().
     */
    public function testAddProfessionalDescription() {
        $this->object->addProfessionalDescription($this->mockVarietyDescriptionProfessional);
        $array = $this->object->getProfessionalDescriptions();
        $this->assertContains($this->mockVarietyDescriptionProfessional, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeProfessionalDescription
     * @todo   Implement testRemoveProfessionalDescription().
     */
    public function testRemoveProfessionalDescription() {
        $this->object->addProfessionalDescription($this->mockVarietyDescriptionProfessional);
        $array = $this->object->getProfessionalDescriptions();
        $this->object->removeProfessionalDescription($this->mockVarietyDescriptionProfessional);
        $this->assertNotcontains($this->mockVarietyDescriptionProfessional, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getProfessionalDescriptions
     * @todo   Implement testGetProfessionalDescriptions().
     */
    public function testGetProfessionalDescriptions() {
        $get = $this->object->getProfessionalDescriptions();
        $this->assertInstanceOf(ArrayCollection::class, $get);
        $this->assertNotNull($get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getProfessional_descriptions
     * @todo   Implement testGetProfessional_descriptions().
     */
    public function testGetProfessional_descriptions() {
        $get = $this->object->getProfessional_descriptions();
        $get2 = $this->object->getProfessionalDescriptions();
        $this->assertEquals($get, $get2);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setProfessionalDescriptions
     * @todo   Implement testSetProfessionalDescriptions().
     */
    public function testSetProfessionalDescriptions() {
//        $descriptions = new ArrayCollection();
//        $set =$this->object->setProfessionalDescriptions($descriptions);
//        var_dump ($this->object->getProfessional_descriptions());
//        $this->assertArrayHasKey(null, null);
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addAmateurDescription
     * @todo   Implement testAddAmateurDescription().
     */
    public function testAddAmateurDescription() {
        $this->object->addAmateurDescription($this->mockVarietyDescriptionAmateur);
        $array = $this->object->getAmateurDescriptions();
        $this->assertContains($this->mockVarietyDescriptionAmateur, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeAmateurDescription
     * @todo   Implement testRemoveAmateurDescription().
     */
    public function testRemoveAmateurDescription() {
        $this->object->addAmateurDescription($this->mockVarietyDescriptionAmateur);
        $array = $this->object->getAmateurDescriptions();
        $this->object->removeAmateurDescription($this->mockVarietyDescriptionAmateur);
        $this->assertNotcontains($this->mockVarietyDescriptionAmateur, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getAmateurDescriptions
     * @todo   Implement testGetAmateurDescriptions().
     */
    public function testGetAmateurDescriptions() {
        $get = $this->object->getAmateurDescriptions();
        $this->assertInstanceOf(ArrayCollection::class, $get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getAmateur_descriptions
     * @todo   Implement testGetAmateur_descriptions().
     */
    public function testGetAmateur_descriptions() {
        $get = $this->object->getAmateur_descriptions();
        $get2 = $this->object->getAmateurDescriptions();
        $this->assertEquals($get, $get2);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setAmateurDescriptions
     * @todo   Implement testSetAmateurDescriptions().
     */
    public function testSetAmateurDescriptions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addProductionDescription
     * @todo   Implement testAddProductionDescription().
     */
    public function testAddProductionDescription() {
        $this->object->addProductionDescription($this->mockProductionDescription);
        $array = $this->object->getProductionDescriptions();
        $this->assertContains($this->mockProductionDescription, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeProductionDescription
     * @todo   Implement testRemoveProductionDescription().
     */
    public function testRemoveProductionDescription() {
        $this->object->addProductionDescription($this->mockProductionDescription);
        $array = $this->object->getProductionDescriptions();
        $this->object->removeProductionDescription($this->mockProductionDescription);
        $this->assertNotcontains($this->mockProductionDescription, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getProductionDescriptions
     * @todo   Implement testGetProductionDescriptions().
     */
    public function testGetProductionDescriptions() {
        $get = $this->object->getProductionDescriptions();
        $this->assertInstanceOf(ArrayCollection::class, $get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getProduction_descriptions
     * @todo   Implement testGetProduction_descriptions().
     */
    public function testGetProduction_descriptions() {
        $get = $this->object->getProduction_descriptions();
        $get2 = $this->object->getProductionDescriptions();
        $this->assertEquals($get, $get2);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setProductionDescriptions
     * @todo   Implement testSetProductionDescriptions().
     */
    public function testSetProductionDescriptions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addCommercialDescription
     * @todo   Implement testAddCommercialDescription().
     */
    public function testAddCommercialDescription() {
        $this->object->addCommercialDescription($this->mockCommercialDescription);
        $array = $this->object->getCommercialDescriptions();
        $this->assertContains($this->mockCommercialDescription, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeCommercialDescription
     * @todo   Implement testRemoveCommercialDescription().
     */
    public function testRemoveCommercialDescription() {
        $this->object->addCommercialDescription($this->mockCommercialDescription);
        $array = $this->object->getCommercialDescriptions();
        $this->object->removeCommercialDescription($this->mockCommercialDescription);
        $this->assertNotcontains($this->mockCommercialDescription, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getCommercialDescriptions
     * @todo   Implement testGetCommercialDescriptions().
     */
    public function testGetCommercialDescriptions() {
        $get = $this->object->getCommercialDescriptions();
        $this->assertInstanceOf(ArrayCollection::class, $get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getCommercial_descriptions
     * @todo   Implement testGetCommercial_descriptions().
     */
    public function testGetCommercial_descriptions() {
        $get = $this->object->getCommercial_descriptions();
        $get2 = $this->object->getCommercialDescriptions();
        $this->assertEquals($get, $get2);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setCommercialDescriptions
     * @todo   Implement testSetCommercialDescriptions().
     */
    public function testSetCommercialDescriptions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addPlantDescription
     * @todo   Implement testAddPlantDescription().
     */
    public function testAddPlantDescription() {
        $this->object->addPlantDescription($this->mockVarietyDescriptionPlant);
        $array = $this->object->getPlantDescriptions();
        $this->assertContains($this->mockVarietyDescriptionPlant, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removePlantDescription
     * @todo   Implement testRemovePlantDescription().
     */
    public function testRemovePlantDescription() {
        $this->object->addPlantDescription($this->mockVarietyDescriptionPlant);
        $array = $this->object->getCommercialDescriptions();
        $this->object->removePlantDescription($this->mockVarietyDescriptionPlant);
        $this->assertNotcontains($this->mockVarietyDescriptionPlant, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getPlantDescriptions
     * @todo   Implement testGetPlantDescriptions().
     */
    public function testGetPlantDescriptions() {
        $get = $this->object->getPlantDescriptions();
        $this->assertInstanceOf(ArrayCollection::class, $get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getPlant_descriptions
     * @todo   Implement testGetPlant_descriptions().
     */
    public function testGetPlant_descriptions() {
        $get = $this->object->getPlant_descriptions();
        $get2 = $this->object->getPlantDescriptions();
        $this->assertEquals($get, $get2);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setPlantDescriptions
     * @todo   Implement testSetPlantDescriptions().
     */
    public function testSetPlantDescriptions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addCultureDescription
     * @todo   Implement testAddCultureDescription().
     */
    public function testAddCultureDescription() {
        $this->object->addCultureDescription($this->mockVarietyDescriptionCulture);
        $array = $this->object->getCultureDescriptions();
        $this->assertContains($this->mockVarietyDescriptionCulture, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeCultureDescription
     * @todo   Implement testRemoveCultureDescription().
     */
    public function testRemoveCultureDescription() {
        $this->object->addCultureDescription($this->mockVarietyDescriptionCulture);
        $array = $this->object->getCommercialDescriptions();
        $this->object->removeCultureDescription($this->mockVarietyDescriptionCulture);
        $this->assertNotcontains($this->mockVarietyDescriptionCulture, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getCultureDescriptions
     * @todo   Implement testGetCultureDescriptions().
     */
    public function testGetCultureDescriptions() {
        $get = $this->object->getCultureDescriptions();
        $this->assertInstanceOf(ArrayCollection::class, $get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getCulture_descriptions
     * @todo   Implement testGetCulture_descriptions().
     */
    public function testGetCulture_descriptions() {
        $get = $this->object->getCulture_descriptions();
        $get2 = $this->object->getCultureDescriptions();
        $this->assertEquals($get, $get2);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setCultureDescriptions
     * @todo   Implement testSetCultureDescriptions().
     */
    public function testSetCultureDescriptions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addInnerDescription
     * @todo   Implement testAddInnerDescription().
     */
    public function testAddInnerDescription() {
        $this->object->addInnerDescription($this->mockInnerDescription);
        $array = $this->object->getInnerDescriptions();
        $this->assertContains($this->mockInnerDescription, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeInnerDescription
     * @todo   Implement testRemoveInnerDescription().
     */
    public function testRemoveInnerDescription() {
        $this->object->addInnerDescription($this->mockInnerDescription);
        $array = $this->object->getInnerDescriptions();
        $this->object->removeInnerDescription($this->mockInnerDescription);
        $this->assertNotcontains($this->mockInnerDescription, $array);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getInnerDescriptions
     * @todo   Implement testGetInnerDescriptions().
     */
    public function testGetInnerDescriptions() {
        $get = $this->object->getInnerDescriptions();
        $this->assertInstanceOf(ArrayCollection::class, $get);
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setInnerDescriptions
     * @todo   Implement testSetInnerDescriptions().
     */
    public function testSetInnerDescriptions() {
        $test = 'test';
        $this->object->setInnerDescriptions($test);
        $get = $this->object->getInnerDescriptions();
        $this->assertEquals($get, 'test');
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addLibrinfoFile
     * @todo   Implement testAddLibrinfoFile().
     */
    public function testAddLibrinfoFile() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeLibrinfoFile
     * @todo   Implement testRemoveLibrinfoFile().
     */
    public function testRemoveLibrinfoFile() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setName
     * @todo   Implement testSetName().
     */
    public function testSetName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getNameTrait
     * @todo   Implement testGetNameTrait().
     */
    public function testGetNameTrait() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getId
     * @todo   Implement testGetId().
     */
    public function testGetId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setId
     * @todo   Implement testSetId().
     */
    public function testSetId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::isNew
     * @todo   Implement testIsNew().
     */
    public function testIsNew() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::addImage
     * @todo   Implement testAddImage().
     */
    public function testAddImage() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::removeImage
     * @todo   Implement testRemoveImage().
     */
    public function testRemoveImage() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getImages
     * @todo   Implement testGetImages().
     */
    public function testGetImages() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setImages
     * @todo   Implement testSetImages().
     */
    public function testSetImages() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getLibrinfoFiles
     * @todo   Implement testGetLibrinfoFiles().
     */
    public function testGetLibrinfoFiles() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getCreatedAt
     * @todo   Implement testGetCreatedAt().
     */
    public function testGetCreatedAt() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setCreatedAt
     * @todo   Implement testSetCreatedAt().
     */
    public function testSetCreatedAt() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getUpdatedAt
     * @todo   Implement testGetUpdatedAt().
     */
    public function testGetUpdatedAt() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setUpdatedAt
     * @todo   Implement testSetUpdatedAt().
     */
    public function testSetUpdatedAt() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::setDescription
     * @todo   Implement testSetDescription().
     */
    public function testSetDescription() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\VarietiesBundle\Entity\Variety::getDescription
     * @todo   Implement testGetDescription().
     */
    public function testGetDescription() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
